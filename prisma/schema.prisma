// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Chat {
  id           String    @id @default(cuid())
  participants User[]
  startedAt    DateTime @default(now())
  endedAt      DateTime
}

model ChatMessage {
  id      String    @id @default(cuid())
  chatId  String
  message String
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  firstName   String
  lastName    String
  address     String
  postalCode  String
  city        String
  phoneNumber String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  roleId      Int
  Chat        Chat?         @relation(fields: [chatId], references: [id])
  chatId      String
  JournalPost JournalPost[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Role {
  id        String    @id @default(cuid())
  roleName  String
  createdAt DateTime @default(now())
  UpdatedAt DateTime
}

model JournalInfo {
  id        String    @id @default(cuid())
  ssn       String        @unique
  firstName String
  lastName  String
  posts     JournalPost[]
}

model JournalPost {
  id            String    @id @default(cuid())
  text          String
  createdAt     DateTime     @default(now())
  UpdatedAt     DateTime
  signedBy      User         @relation(fields: [userId], references: [id])
  userId        String
  JournalInfo   JournalInfo? @relation(fields: [journalInfoId], references: [id])
  journalInfoId String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @db.Text
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}